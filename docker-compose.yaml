services:
  notification-service:
    build:
      context: ./notification
      dockerfile: Dockerfile
    container_name: notification-service
    env_file:
      - .notification.env
    ports:
      - "8085:8085"
      - "50055:50055"
    depends_on:
      - postgres
      - pgadmin
      - kafka
    environment:
      - REST_PORT=8085
      - GRPC_PORT=50055
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DATABASE=notificaiton
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
    command: ["/bin/sh", "-c", "sleep 10 && /notification/notification"]

  logger-service:
    build:
      context: ./logger
      dockerfile: Dockerfile
    container_name: logger-service
    env_file:
      - .log.env
    ports:
      - "8082:8082"
      - "50052:50052"
    depends_on:
      - postgres
      - pgadmin
      - kafka
    environment:
      - REST_PORT=8082
      - GRPC_PORT=50052
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DATABASE=log
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
    command: ["/bin/sh", "-c", "sleep 10 && /logger/logger"]


  postgres:
    image: postgres:17.4-alpine
    container_name: db
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
  
  pgadmin:
    image: dpage/pgadmin4:9.3
    container_name: pgadmin
    ports:
      - "${PGADMIN_PORT:-8080}:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2182:2181"
    
    healthcheck:
      test: ["CMD-SHELL", "echo stat | nc localhost 2181 | grep Mode"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.9.0
    container_name: kafka1
    depends_on:
      - zookeeper
    ports:
      - "9091:9091"    # Internal Docker communication
      - "19091:19091"  # External Localhost access
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9091,PLAINTEXT_HOST://0.0.0.0:19091
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9091,PLAINTEXT_HOST://localhost:19091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG_FLUSH_INTERVAL_MESSAGES: 10000
      KAFKA_NUM_PARTITIONS: 3

    # healthcheck:
    #   test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka1:9091 --list || exit 1"]
    #   interval: 10s
    #   timeout: 10s
    #   retries: 20
    #   start_period: 30s


volumes:
  postgres_data:
    name: db-data
  pgadmin_data:
